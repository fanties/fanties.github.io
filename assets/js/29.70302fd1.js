(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{389:function(v,_,a){"use strict";a.r(_);var t=a(0),r=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h3",{attrs:{id:"为什么需要事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要事务"}},[v._v("#")]),v._v(" 为什么需要事务？")]),v._v(" "),_("blockquote",[_("p",[v._v("引言：在实际开发中，我们经常遇到类似下面的情况：\n场景一：A账户给B账户转账1000元，实际上这个操作包含两个主要步骤，首先是A账户扣除1000元，然后在B账户增加1000元。假如因为某些故障，A账户已经扣除了1000元，但是B账户却没有增加1000元，这就产生了数据不一致的情况。实际上，我们希望整个转账过程要么减少和增加都成功，要么减少和增加都失败。\n场景二：用户在电商平台下单，一般会涉及到以下流程：首先减少商品的库存，然后生成订单。加入库存扣除成功了，但是生成订单失败，那么库存数据与实际库存就产生了不一致的情况。我们希望整个流程都成功时，库存才减少，而某个流程失败是，库存能够回退。")])]),v._v(" "),_("p",[v._v("为了解决上面类似的场景的情况，我们在计算机软件开发中引入了“事务”这一概念。")]),v._v(" "),_("h3",{attrs:{id:"相关术语"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#相关术语"}},[v._v("#")]),v._v(" 相关术语")]),v._v(" "),_("p",[v._v("推开事务的大门，扑面而来的是一大堆晦涩难懂的专业术语与名词，大家不妨先看看：")]),v._v(" "),_("p",[v._v("ACID\nJTA\nCAP\nBASE\nTCC\nSaga\nAT")]),v._v(" "),_("p",[v._v("数据库事务\n分布式事务\n本地事务\n全局事务\n刚性事务\n柔性事务")]),v._v(" "),_("h3",{attrs:{id:"事务的概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务的概念"}},[v._v("#")]),v._v(" 事务的概念")]),v._v(" "),_("p",[v._v("事务提供一种机制将一个活动涉及的所有操作纳入到一个不可分割的执行单元，组成事务的所有操作只有在所有操作均能正常执行的情况下方能提交，只要其中任一操作执行失败，都将导致整个事务的回滚。")]),v._v(" "),_("p",[v._v("简单地说，事务提供一种“要么什么都不做，要么做全套（All or Nothing）”机制。")]),v._v(" "),_("h3",{attrs:{id:"事务的acid特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务的acid特性"}},[v._v("#")]),v._v(" 事务的ACID特性")]),v._v(" "),_("p",[_("strong",[v._v("A：原子性(Atomicity)")]),v._v(" 一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。")]),v._v(" "),_("p",[v._v("事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。")]),v._v(" "),_("p",[v._v("就像你买东西要么交钱收货一起都执行，要么发不出货，就退钱。")]),v._v(" "),_("p",[_("strong",[v._v("C：一致性(Consistency)")]),v._v(" 事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。")]),v._v(" "),_("p",[v._v("如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。")]),v._v(" "),_("p",[v._v("如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。")]),v._v(" "),_("p",[v._v("操作前A：800，B：200\n操作后A：600，B：400")]),v._v(" "),_("p",[v._v("一致性表示事务完成后，符合逻辑运算")]),v._v(" "),_("p",[v._v("不一致的意思：之前总共有1000，现在总共只有900了")]),v._v(" "),_("p",[v._v("这里的一致性，是应用层感知的")]),v._v(" "),_("p",[_("strong",[v._v("I：隔离性(Isolation)")]),v._v(" 指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。")]),v._v(" "),_("p",[v._v("由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。")]),v._v(" "),_("p",[v._v("打个比方，你买东西这个事情，是不影响其他人的。")]),v._v(" "),_("p",[_("strong",[v._v("D：持久性(Durability)")]),v._v(" 指的是只要事务成功结束，它对数据库所做的更新就必须永久保存下来。")]),v._v(" "),_("p",[v._v("即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。")]),v._v(" "),_("h3",{attrs:{id:"事务的分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务的分类"}},[v._v("#")]),v._v(" 事务的分类")]),v._v(" "),_("p",[v._v("根据事务参与者的分布来分：")]),v._v(" "),_("ul",[_("li",[v._v("本地事务/数据库事务")]),v._v(" "),_("li",[v._v("分布式事务")])]),v._v(" "),_("h3",{attrs:{id:"本地事务-数据库事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#本地事务-数据库事务"}},[v._v("#")]),v._v(" 本地事务/数据库事务")]),v._v(" "),_("h4",{attrs:{id:"innodb-实现原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#innodb-实现原理"}},[v._v("#")]),v._v(" InnoDB 实现原理")]),v._v(" "),_("p",[v._v("InnoDB 是 MySQL 的一个存储引擎，大部分人对 MySQL 都比较熟悉，这里简单介绍一下数据库事务实现的一些基本原理。")]),v._v(" "),_("p",[v._v("在本地事务中，服务和资源在事务的包裹下可以看做是一体的，如下图：")]),v._v(" "),_("p",[v._v("我们的本地事务由资源管理器进行管理：")]),v._v(" "),_("p",[v._v("而事务的 ACID 是通过 InnoDB 日志和锁来保证。事务的隔离性是通过数据库锁的机制实现的，持久性通过 Redo Log（重做日志）来实现，原子性和一致性通过 Undo Log 来实现。")]),v._v(" "),_("p",[v._v("Undo Log 的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为 Undo Log）。然后进行数据的修改。")]),v._v(" "),_("p",[v._v("如果出现了错误或者用户执行了 Rollback 语句，系统可以利用 Undo Log 中的备份将数据恢复到事务开始之前的状态。")]),v._v(" "),_("p",[v._v("和 Undo Log 相反，Redo Log 记录的是新数据的备份。在事务提交前，只要将 Redo Log 持久化即可，不需要将数据持久化。")]),v._v(" "),_("p",[v._v("当系统崩溃时，虽然数据没有持久化，但是 Redo Log 已经持久化。系统可以根据 Redo Log 的内容，将所有数据恢复到***的状态。对具体实现过程有兴趣的同学可以去自行搜索扩展。")]),v._v(" "),_("h3",{attrs:{id:"分布式事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[v._v("#")]),v._v(" 分布式事务")]),v._v(" "),_("p",[v._v("要学习分布式事务，首先需要了解“分布式”的基本概念，以及“本地事务”的基本概念。")]),v._v(" "),_("h4",{attrs:{id:"分布式事务的概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务的概念"}},[v._v("#")]),v._v(" 分布式事务的概念")]),v._v(" "),_("p",[v._v("分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。")]),v._v(" "),_("p",[v._v("简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。")]),v._v(" "),_("p",[v._v("本质上来说，分布式事务就是为了保证不同数据库的数据一致性。")]),v._v(" "),_("h4",{attrs:{id:"分布式事务产生的背景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务产生的背景"}},[v._v("#")]),v._v(" 分布式事务产生的背景")]),v._v(" "),_("p",[v._v("在数据操作过程中，我们可以分为两个部分：")]),v._v(" "),_("ol",[_("li",[v._v("Service 服务")]),v._v(" "),_("li",[v._v("Resource 资源")])]),v._v(" "),_("h5",{attrs:{id:"service"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[v._v("#")]),v._v(" Service")]),v._v(" "),_("p",[v._v("随着互联网快速发展，微服务，SOA 等服务架构模式正在被大规模的使用，这就让一个Service产生了多个节点")]),v._v(" "),_("p",[v._v("举个简单的例子，一个公司之内，用户的资产可能分为好多个部分，比如余额，积分，优惠券等等。\n在公司内部有可能积分功能由一个微服务团队维护，优惠券又是另外的团队维护。\n这样的话就无法保证积分扣减了之后，优惠券能否扣减成功。")]),v._v(" "),_("h5",{attrs:{id:"resource"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#resource"}},[v._v("#")]),v._v(" Resource")]),v._v(" "),_("p",[v._v("同样的，互联网发展得太快了，我们的 MySQL 一般来说装的数据就得进行分库分表，这就产生了多个Resource节点")]),v._v(" "),_("p",[v._v("对于一个支付宝的转账业务来说，你给朋友转钱，有可能你的数据库是在北京，而你的朋友的钱是存在上海，所以我们依然无法保证他们能同时成功。")]),v._v(" "),_("h4",{attrs:{id:"分布式理论"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式理论"}},[v._v("#")]),v._v(" 分布式理论")]),v._v(" "),_("p",[v._v("从上面来看分布式事务是随着互联网高速发展应运而生的，这是一个必然。")]),v._v(" "),_("p",[v._v("我们之前说过数据库的 ACID 四大特性，已经无法满足我们分布式事务，这个时候又有一些新的大佬提出一些新的理论。")]),v._v(" "),_("h5",{attrs:{id:"cap"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cap"}},[v._v("#")]),v._v(" CAP")]),v._v(" "),_("p",[v._v("CAP 定理，又被叫作布鲁尔定理。对于设计分布式系统(不仅仅是分布式事务)的架构师来说，CAP 就是你的入门理论。")]),v._v(" "),_("p",[v._v("C (一致性)：对某个指定的客户端来说，读操作能返回***的写操作。")]),v._v(" "),_("p",[v._v("对于数据分布在不同节点上的数据来说，如果在某个节点更新了数据，那么在其他节点如果都能读取到这个***的数据，那么就称为强一致，如果有某个节点没有读取到，那就是分布式不一致。")]),v._v(" "),_("p",[v._v("A (可用性)：非故障的节点在合理的时间内返回合理的响应(不是错误和超时的响应)。可用性的两个关键一个是合理的时间，一个是合理的响应。")]),v._v(" "),_("p",[v._v("合理的时间指的是请求不能***被阻塞，应该在合理的时间给出返回。合理的响应指的是系统应该明确返回结果并且结果是正确的，这里的正确指的是比如应该返回 50，而不是返回 40。")]),v._v(" "),_("p",[v._v("P (分区容错性)：当出现网络分区后，系统能够继续工作。打个比方，这里集群有多台机器，有台机器网络出现了问题，但是这个集群仍然可以正常工作。")]),v._v(" "),_("p",[v._v("熟悉 CAP 的人都知道，三者不能共有，如果感兴趣可以搜索 CAP 的证明，在分布式系统中，网络无法 100% 可靠，分区其实是一个必然现象。")]),v._v(" "),_("p",[v._v("如果我们选择了 CA 而放弃了 P，那么当发生分区现象时，为了保证一致性，这个时候必须拒绝请求，但是 A 又不允许，所以分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。")]),v._v(" "),_("p",[v._v("对于 CP 来说，放弃可用性，追求一致性和分区容错性，我们的 ZooKeeper 其实就是追求的强一致。")]),v._v(" "),_("p",[v._v("对于 AP 来说，放弃一致性(这里说的一致性是强一致性)，追求分区容错性和可用性，这是很多分布式系统设计时的选择，后面的 BASE 也是根据 AP 来扩展。")]),v._v(" "),_("p",[v._v("顺便一提，CAP 理论中是忽略网络延迟，也就是当事务提交时，从节点 A 复制到节点 B 没有延迟，但是在现实中这个是明显不可能的，所以总会有一定的时间是不一致。")]),v._v(" "),_("p",[v._v("同时 CAP 中选择两个，比如你选择了 CP，并不是叫你放弃 A。因为 P 出现的概率实在是太小了，大部分的时间你仍然需要保证 CA。")]),v._v(" "),_("p",[v._v("就算分区出现了你也要为后来的 A 做准备，比如通过一些日志的手段，是其他机器回复至可用。")]),v._v(" "),_("h5",{attrs:{id:"base"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#base"}},[v._v("#")]),v._v(" BASE")]),v._v(" "),_("p",[v._v("BASE 是 Basically Available(基本可用)、Soft state(软状态)和 Eventually consistent (最终一致性)三个短语的缩写，是对 CAP 中 AP 的一个扩展。")]),v._v(" "),_("p",[v._v("基本可用：分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。")]),v._v(" "),_("p",[v._v("软状态：允许系统中存在中间状态，这个状态不影响系统可用性，这里指的是 CAP 中的不一致。")]),v._v(" "),_("p",[v._v("最终一致：最终一致是指经过一段时间后，所有节点数据都将会达到一致。")]),v._v(" "),_("p",[v._v("BASE 解决了 CAP 中理论没有网络延迟，在 BASE 中用软状态和最终一致，保证了延迟后的一致性。")]),v._v(" "),_("p",[v._v("BASE 和 ACID 是相反的，它完全不同于 ACID 的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。")]),v._v(" "),_("h3",{attrs:{id:"分布式事务解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务解决方案"}},[v._v("#")]),v._v(" 分布式事务解决方案")]),v._v(" "),_("h4",{attrs:{id:"_2pc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2pc"}},[v._v("#")]),v._v(" 2PC")]),v._v(" "),_("p",[v._v("说到2PC就不得不聊数据库分布式事务中的 XA Transactions。\n在XA协议中分为两阶段:")]),v._v(" "),_("p",[v._v("第一阶段：事务管理器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交.")]),v._v(" "),_("p",[v._v("第二阶段：事务协调器要求每个数据库提交数据，或者回滚数据。")]),v._v(" "),_("p",[v._v("优点： 尽量保证了数据的强一致，实现成本较低，在各大主流数据库都有自己实现，对于MySQL是从5.5开始支持。")]),v._v(" "),_("p",[v._v("缺点:")]),v._v(" "),_("p",[v._v("单点问题:事务管理器在整个流程中扮演的角色很关键，如果其宕机，比如在第一阶段已经完成，在第二阶段正准备提交的时候事务管理器宕机，资源管理器就会一直阻塞，导致数据库无法使用。\n同步阻塞:在准备就绪之后，资源管理器中的资源一直处于阻塞，直到提交完成，释放资源。\n数据不一致:两阶段提交协议虽然为分布式数据强一致性所设计，但仍然存在数据不一致性的可能，比如在第二阶段中，假设协调者发出了事务commit的通知，但是因为网络问题该通知仅被一部分参与者所收到并执行了commit操作，其余的参与者则因为没有收到通知一直处于阻塞状态，这时候就产生了数据的不一致性。\n总的来说，XA协议比较简单，成本较低，但是其单点问题，以及不能支持高并发(由于同步阻塞)依然是其最大的弱点。")]),v._v(" "),_("h4",{attrs:{id:"tcc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcc"}},[v._v("#")]),v._v(" TCC")]),v._v(" "),_("p",[v._v("关于TCC（Try-Confirm-Cancel）的概念，最早是由Pat Helland于2007年发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文提出。\nTCC事务机制相比于上面介绍的XA，解决了其几个缺点:")]),v._v(" "),_("ol",[_("li",[v._v("解决了协调者单点，由主业务方发起并完成这个业务活动。业务活动管理器也变成多点，引入集群。")]),v._v(" "),_("li",[v._v("同步阻塞:引入超时，超时后进行补偿，并且不会锁定整个资源，将资源转换为业务逻辑形式，粒度变小。")]),v._v(" "),_("li",[v._v("数据一致性，有了补偿机制之后，由业务活动管理器控制一致性。\n对于TCC的解释:")])]),v._v(" "),_("p",[_("strong",[v._v("Try阶段：")]),v._v(" 尝试执行,完成所有业务检查（一致性）,预留必须业务资源（准隔离性）")]),v._v(" "),_("p",[_("strong",[v._v("Confirm阶段：")]),v._v(" 确认执行真正执行业务，不作任何业务检查，只使用Try阶段预留的业务资源，Confirm操作满足幂等性。要求具备幂等设计，Confirm失败后需要进行重试。")]),v._v(" "),_("p",[_("strong",[v._v("Cancel阶段：")]),v._v(" 取消执行，释放Try阶段预留的业务资源 Cancel操作满足幂等性Cancel阶段的异常和Confirm阶段异常处理方案基本上一致。")]),v._v(" "),_("p",[v._v("举个简单的例子如果你用100元买了一瓶水， Try阶段:你需要向你的钱包检查是否够100元并锁住这100元，水也是一样的。")]),v._v(" "),_("p",[v._v("如果有一个失败，则进行cancel(释放这100元和这一瓶水)，如果cancel失败不论什么失败都进行重试cancel，所以需要保持幂等。")]),v._v(" "),_("p",[v._v("如果都成功，则进行confirm,确认这100元扣，和这一瓶水被卖，如果confirm失败无论什么失败则重试(会依靠活动日志进行重试)")]),v._v(" "),_("p",[v._v("对于TCC来说适合一些:")]),v._v(" "),_("p",[v._v("强隔离性，严格一致性要求的活动业务。\n执行时间较短的业务\n实现参考:ByteTCC:https://github.com/liuyangming/ByteTCC/")]),v._v(" "),_("h4",{attrs:{id:"本地消息表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#本地消息表"}},[v._v("#")]),v._v(" 本地消息表")]),v._v(" "),_("p",[v._v("本地消息表这个方案最初是ebay提出的 ebay的完整方案https://queue.acm.org/detail.cfm?id=1394128。")]),v._v(" "),_("p",[v._v("此方案的核心是将需要分布式处理的任务通过消息日志的方式来异步执行。消息日志可以存储到本地文本、数据库或消息队列，再通过业务规则自动或人工发起重试。人工重试更多的是应用于支付场景，通过对账系统对事后问题的处理。")]),v._v(" "),_("p",[v._v("对于本地消息队列来说核心是把大事务转变为小事务。还是举上面用100元去买一瓶水的例子。")]),v._v(" "),_("p",[v._v("1.当你扣钱的时候，你需要在你扣钱的服务器上新增加一个本地消息表，你需要把你扣钱和写入减去水的库存到本地消息表放入同一个事务(依靠数据库本地事务保证一致性。")]),v._v(" "),_("p",[v._v("2.这个时候有个定时任务去轮询这个本地事务表，把没有发送的消息，扔给商品库存服务器，叫他减去水的库存，到达商品服务器之后这个时候得先写入这个服务器的事务表，然后进行扣减，扣减成功后，更新事务表中的状态。")]),v._v(" "),_("p",[v._v("3.商品服务器通过定时任务扫描消息表或者直接通知扣钱服务器，扣钱服务器本地消息表进行状态更新。")]),v._v(" "),_("p",[v._v("4.针对一些异常情况，定时扫描未成功处理的消息，进行重新发送，在商品服务器接到消息之后，首先判断是否是重复的，如果已经接收，在判断是否执行，如果执行在马上又进行通知事务，如果未执行，需要重新执行需要由业务保证幂等，也就是不会多扣一瓶水。")]),v._v(" "),_("p",[v._v("本地消息队列是BASE理论，是最终一致模型，适用于对一致性要求不高的。实现这个模型时需要注意重试的幂等。")]),v._v(" "),_("h3",{attrs:{id:"mq事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq事务"}},[v._v("#")]),v._v(" MQ事务")]),v._v(" "),_("p",[v._v("在RocketMQ中实现了分布式事务，实际上其实是对本地消息表的一个封装，将本地消息表移动到了MQ内部，下面简单介绍一下MQ事务，如果想对其详细了解可以参考: https://www.jianshu.com/p/453c6e7ff81c")]),v._v(" "),_("p",[v._v("基本流程如下: 第一阶段Prepared消息，会拿到消息的地址。")]),v._v(" "),_("p",[v._v("第二阶段执行本地事务。")]),v._v(" "),_("p",[v._v("第三阶段通过第一阶段拿到的地址去访问消息，并修改状态。消息接受者就能使用这个消息。")]),v._v(" "),_("p",[v._v("如果确认消息失败，在RocketMq Broker中提供了定时扫描没有更新状态的消息，如果有消息没有得到确认，会向消息发送者发送消息，来判断是否提交，在rocketmq中是以listener的形式给发送者，用来处理\n如果消费超时，则需要一直重试，消息接收端需要保证幂等。如果消息消费失败，这个就需要人工进行处理，因为这个概率较低，如果为了这种小概率时间而设计这个复杂的流程反而得不偿失")]),v._v(" "),_("h4",{attrs:{id:"saga事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#saga事务"}},[v._v("#")]),v._v(" Saga事务")]),v._v(" "),_("p",[v._v("Saga是30年前一篇数据库伦理提到的一个概念。其核心思想是将长事务拆分为多个本地短事务，由Saga事务协调器协调，如果正常结束那就正常完成，如果某个步骤失败，则根据相反顺序一次调用补偿操作。 Saga的组成：")]),v._v(" "),_("p",[v._v("每个Saga由一系列sub-transaction Ti 组成 每个Ti 都有对应的补偿动作Ci，补偿动作用于撤销Ti造成的结果,这里的每个T，都是一个本地事务。 可以看到，和TCC相比，Saga没有“预留 try”动作，它的Ti就是直接提交到库。")]),v._v(" "),_("p",[v._v("Saga的执行顺序有两种：")]),v._v(" "),_("p",[v._v("T1, T2, T3, ..., Tn")]),v._v(" "),_("p",[v._v("T1, T2, ..., Tj, Cj,..., C2, C1，其中0 < j < n Saga定义了两种恢复策略：")]),v._v(" "),_("p",[v._v("向后恢复，即上面提到的第二种执行顺序，其中j是发生错误的sub-transaction，这种做法的效果是撤销掉之前所有成功的sub-transation，使得整个Saga的执行结果撤销。 向前恢复，适用于必须要成功的场景，执行顺序是类似于这样的：T1, T2, ..., Tj(失败), Tj(重试),..., Tn，其中j是发生错误的sub-transaction。该情况下不需要Ci。")]),v._v(" "),_("p",[v._v("这里要注意的是，在saga模式中不能保证隔离性，因为没有锁住资源，其他事务依然可以覆盖或者影响当前事务。")]),v._v(" "),_("p",[v._v("还是拿100元买一瓶水的例子来说，这里定义")]),v._v(" "),_("p",[v._v("T1=扣100元 T2=给用户加一瓶水 T3=减库存一瓶水")]),v._v(" "),_("p",[v._v("C1=加100元 C2=给用户减一瓶水 C3=给库存加一瓶水")]),v._v(" "),_("p",[v._v("我们一次进行T1,T2，T3如果发生问题，就执行发生问题的C操作的反向。 上面说到的隔离性的问题会出现在，如果执行到T3这个时候需要执行回滚，但是这个用户已经把水喝了(另外一个事务)，回滚的时候就会发现，无法给用户减一瓶水了。这就是事务之间没有隔离性的问题")]),v._v(" "),_("p",[v._v("可以看见saga模式没有隔离性的影响还是较大，可以参照华为的解决方案:从业务层面入手加入一 Session 以及锁的机制来保证能够串行化操作资源。也可以在业务层面通过预先冻结资金的方式隔离这部分资源， 最后在业务操作的过程中可以通过及时读取当前状态的方式获取到最新的更新。")]),v._v(" "),_("p",[v._v("具体实例:可以参考华为的servicecomb")]),v._v(" "),_("h3",{attrs:{id:"相关知识"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#相关知识"}},[v._v("#")]),v._v(" 相关知识")]),v._v(" "),_("h4",{attrs:{id:"什么是幂等性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是幂等性"}},[v._v("#")]),v._v(" 什么是幂等性？")]),v._v(" "),_("blockquote",[_("p",[v._v("幂等性是指同一个操作无论请求多少次，其结果都相同。\n幂等操作实现方式有：")])]),v._v(" "),_("ol",[_("li",[v._v("操作之前在业务方法进行判断如果执行过了就不再执行。")]),v._v(" "),_("li",[v._v("缓存所有请求和处理的结果，已经处理的请求则直接返回结果。")]),v._v(" "),_("li",[v._v("在数据库表中加一个状态字段（未处理，已处理），数据操作时判断未处理时再处理。")])]),v._v(" "),_("h3",{attrs:{id:"参考文献"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[v._v("#")]),v._v(" 参考文献")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s/gg4q_53eiHCI3OUWzN7eWg",target:"_blank",rel:"noopener noreferrer"}},[v._v("再有人问你分布式事务，把这篇扔给他"),_("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=r.exports}}]);