(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{399:function(s,a,t){"use strict";t.r(a);var e=t(0),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"引言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[s._v("#")]),s._v(" 引言")]),s._v(" "),a("p",[s._v("组合模式最大的特点就是运用的“树”这一数据结构。")]),s._v(" "),a("p",[s._v("在面向对象开发中，许多情况我们可以直接运用“树”的数据结构就可以解决问题。")]),s._v(" "),a("p",[s._v("举个例子：\n在设计评论时，每篇文章可以有许多评论，每条评论可以有子评论，子评论也可以有子评论。\n可以发现这就是一种树形结构。")]),s._v(" "),a("p",[s._v("我们看一下代码实现：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" articleId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" reply"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这就是“树”这一数据结构的简单运用。\n当然，更特殊的“树”就是二叉树，可以定义为：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),s._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),s._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"组合模式的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合模式的概念"}},[s._v("#")]),s._v(" 组合模式的概念")]),s._v(" "),a("p",[s._v("亦称： 对象树、­Object Tree、­Composite")]),s._v(" "),a("p",[s._v("组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。")]),s._v(" "),a("p",[s._v("简单来说就是：")]),s._v(" "),a("p",[s._v("组合模式是一种结构型设计模式，你可以使用它将对象组合成树状结构，并且能像使用独立对象一样使用它们。")]),s._v(" "),a("h3",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[s._v("#")]),s._v(" 问题")]),s._v(" "),a("p",[s._v("在实际的开发过程中，我们遇到的场景往往并不是简单的树形结构，而是具有类似于树形结构。")]),s._v(" "),a("p",[s._v("在这种情况向下，树结构中的每个节点，并不是同一个类型，这些显然无法直接将他们很好的组织起来。")]),s._v(" "),a("h3",{attrs:{id:"组成元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组成元素"}},[s._v("#")]),s._v(" 组成元素：")]),s._v(" "),a("ol",[a("li",[s._v("抽象构件角色(Composite)：是组合中对象声明接口，实现所有类共有接口的默认行为。")]),s._v(" "),a("li",[s._v("树叶构件角色(Leaf)：上述提到的单个对象，叶节点没有子节点。")]),s._v(" "),a("li",[s._v("树枝构件角色(Composite)：定义有子部件的组合部件行为，存储子部件，在Component接口中实现与子部件有关的操作。")]),s._v(" "),a("li",[s._v("客户端(Client)：使用 Component 部件的对象。")])]),s._v(" "),a("h3",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[s._v("#")]),s._v(" 优点：")]),s._v(" "),a("ol",[a("li",[s._v("高层模块(客户端)调用简单。组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码；")]),s._v(" "),a("li",[s._v("节点自由增加,更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足“开闭原则”；")])]),s._v(" "),a("h3",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[s._v("#")]),s._v(" 缺点：")]),s._v(" "),a("ol",[a("li",[s._v("在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则")]),s._v(" "),a("li",[s._v("设计较复杂，客户端需要花更多时间理清类之间的层次关系；")]),s._v(" "),a("li",[s._v("不容易限制容器中的构件；")]),s._v(" "),a("li",[s._v("不容易用继承的方法来增加构件的新功能；")])]),s._v(" "),a("h3",{attrs:{id:"组合模式的使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合模式的使用场景"}},[s._v("#")]),s._v(" 组合模式的使用场景：")]),s._v(" "),a("ol",[a("li",[s._v("你想表示对象的部分-整体层次结构，如树形菜单，文件、文件夹的管理。文件系统由文件和目录组成，每个文件里装有内容，而每个目录的内容可以有文件和目录，目录就相当于是由单个对象或组合对象组合而成，如果你想要描述的是这样的数据结构，那么你就可以使用组合模式。")]),s._v(" "),a("li",[s._v("算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。")]),s._v(" "),a("li",[s._v("在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。")]),s._v(" "),a("li",[s._v("你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。")]),s._v(" "),a("li",[s._v("在现实生活中，存在很多“部分-整体”的关系。汽车与轮胎、发动机的关系。医院与科室、医生的关系。学校与学院、学生、老师的关系")])]),s._v(" "),a("ul",[a("li",[s._v("如果你需要实现树状对象结构， 可以使用组合模式。")]),s._v(" "),a("li",[s._v("组合模式为你提供了两种共享公共接口的基本元素类型： 简单叶节点和复杂容器。 容器中可以包含叶节点和其他容器。 这使得你可以构建树状嵌套递归对象结构。")]),s._v(" "),a("li",[s._v("如果你希望客户端代码以相同方式处理简单和复杂元素， 可以使用该模式。")]),s._v(" "),a("li",[s._v("组合模式中定义的所有元素共用同一个接口。 在这一接口的帮助下， 客户端不必在意其所使用的对象的具体类。")])]),s._v(" "),a("h3",{attrs:{id:"参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[s._v("#")]),s._v(" 参考文献")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/86430556",target:"_blank",rel:"noopener noreferrer"}},[s._v("组合模式（Composite Pattern）总结"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);