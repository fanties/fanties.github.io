(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{392:function(a,v,t){"use strict";t.r(v);var _=t(0),s=Object(_.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h3",{attrs:{id:"jdbc简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jdbc简介"}},[a._v("#")]),a._v(" JDBC简介")]),a._v(" "),v("p",[a._v("在web开发中，不可避免的地要使用数据库来存储和管理数据。为了在java语言中提供数据库访问的支持，Sun公司于1996年提供了一套访问数据的标准Java类库，即JDBC。")]),a._v(" "),v("p",[a._v("JDBC的全称是Java数据库连接(Java Database connect)，它是一套用于执行SQL语句的Java API。应用程序可通过这套API连接到关系数据库，并使用SQL语句来完成对数据库中数据的查询、更新和删除等操作。应用程序使用JDBC访问数据库的方式如下图所示。")]),a._v(" "),v("p",[v("img",{attrs:{src:"http://picqq.oss-cn-shenzhen.aliyuncs.com//pic/md/20201209104658.png",alt:"20201209104658"}})]),a._v(" "),v("p",[a._v("JDBC的实现包括三部分。")]),a._v(" "),v("p",[a._v("(1)JDBC驱动管理器：负责注册特定的JDBC驱动器，主要通过java.sql. Driver Manager类实现。")]),a._v(" "),v("p",[a._v("(2)JDBC驱动器API：由Sun公司负责制定，其中最主要的接口是java.sql. Driver接口。")]),a._v(" "),v("p",[a._v("(3)JDBC驱动器：它是一种数据库驱动，由数据库厂商创建，也称为JDBC驱动程序JDBC驱动器实现了JDBC驱动器API，负责与特定的数据库连接，以及处理通信细节。")]),a._v(" "),v("p",[a._v("常用的类与接口就是DriverManager、Connection、Statement、Result、PreparedStatement")]),a._v(" "),v("h3",{attrs:{id:"jdbc驱动类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jdbc驱动类型"}},[a._v("#")]),a._v(" JDBC驱动类型")]),a._v(" "),v("p",[a._v("JDBC 驱动实现了 JDBC API 中定义的接口，该接口用于与数据库服务器进行交互。")]),a._v(" "),v("p",[a._v("例如，使用 JDBC 驱动程序可以让你打开数据库连接，并通过发送 SQL 或数据库命令，然后通过 Java 接收结果。")]),a._v(" "),v("p",[a._v("java.sql 包中附带的 JDK，包含了定义各种类与他们的行为和实际实现，这些类都在第三方驱动程序中完成。第三方供应商在他们的数据库驱动程序中都实现了 java.sql.Driver 接口。")]),a._v(" "),v("p",[a._v("JDBC 驱动程序的实现，因为各种各样的操作系统和 Java 运行在硬件平台的不同而不同。Sun 公司将实现类型分为四类：")]),a._v(" "),v("h4",{attrs:{id:"类型1-jdbc-odbc-桥驱动程序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类型1-jdbc-odbc-桥驱动程序"}},[a._v("#")]),a._v(" 类型1：JDBC-ODBC 桥驱动程序：")]),a._v(" "),v("p",[a._v("在类型1驱动程序中，一个 JDBC 桥接器是用来访问安装在每个客户机上的 ODBC 驱动程序。为了使用 ODBC，需要在目标数据库上配置系统数据源名称（DSN）。")]),a._v(" "),v("p",[a._v("当 Java 刚出来时，这是一个很有用的驱动程序，因为大多数的数据库只支持 ODBC 访问，但现在此类型的驱动程序仅适用于实验用途或在没有其他选择的情况。\n"),v("img",{attrs:{src:"http://picqq.oss-cn-shenzhen.aliyuncs.com//pic/md/20201209105310.png",alt:"20201209105310"}}),a._v("\n自带 JDK 1.2 中的 JDBC-ODBC 桥是这类驱动程序的一个很好的例子。")]),a._v(" "),v("h4",{attrs:{id:"类型2-jdbc-native-api"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类型2-jdbc-native-api"}},[a._v("#")]),a._v(" 类型2：JDBC-Native API")]),a._v(" "),v("p",[a._v("在类型2驱动程序中，JDBC API 调用转换成原生的 C/C++ API 调用，这对于数据库来说具有唯一性。这些驱动程序通常由数据库供应商提供，并和 JDBC-ODBC 桥驱动程序同样的方式使用。该供应商的驱动程序必须安装在每台客户机上。")]),a._v(" "),v("p",[a._v("如果我们改变了当前数据库，我们必须改变原生 API ，因为它是具体到某一个数据库，并且他们大多已经失效了。即使这样用类型2驱动程序也能提高一些速度，因为他消除了 ODBC 的开销。\n"),v("img",{attrs:{src:"http://picqq.oss-cn-shenzhen.aliyuncs.com//pic/md/20201209105343.png",alt:"20201209105343"}}),a._v("\nOracle 调用接口（OCI）驱动程序是一个类型2驱动程序的示例。")]),a._v(" "),v("h4",{attrs:{id:"类型3-jdbc-net-纯-java"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类型3-jdbc-net-纯-java"}},[a._v("#")]),a._v(" 类型3：JDBC-Net 纯 Java")]),a._v(" "),v("p",[a._v("在类型3驱动程序中，一般用三层方法来访问数据库。JDBC 客户端使用标准的网络套接字与中间件应用服务器进行通信。套接字的相关信息被中间件应用服务器转换为数据库管理系统所要求的的调用格式，并转发到数据库服务器。")]),a._v(" "),v("p",[a._v("这种驱动程序是非常灵活的，因为它不需要在客户端上安装代码，而且单个驱动程序能提供访问多个数据库。\n"),v("img",{attrs:{src:"http://picqq.oss-cn-shenzhen.aliyuncs.com//pic/md/20201209105424.png",alt:"20201209105424"}}),a._v("\n你可以将应用服务器作为一个 JDBC “代理”，这意味着它会调用客户端应用程序。因此，你需要一些有关服务器配置方面的知识，这样可以高效地使用此驱动程序类型。")]),a._v(" "),v("p",[a._v("你的应用服务器可能使用类型1，2，或4驱动程序与数据库进行通信，了解它们的细微之处将会很有帮助。")]),a._v(" "),v("h4",{attrs:{id:"类型4-100-纯-java"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类型4-100-纯-java"}},[a._v("#")]),a._v(" 类型4：100％纯 Java")]),a._v(" "),v("p",[a._v("在类型4驱动程序中，一个纯粹的基于 Java 的驱动程序通过 socket 连接与供应商的数据库进行通信。这是可用于数据库的最高性能的驱动程序，并且通常由供应商自身提供。")]),a._v(" "),v("p",[a._v("这种驱动器是非常灵活的，你不需要在客户端或服务端上安装特殊的软件。此外，这些驱动程序是可以动态下载的。\n"),v("img",{attrs:{src:"http://picqq.oss-cn-shenzhen.aliyuncs.com//pic/md/20201209105502.png",alt:"20201209105502"}})]),a._v(" "),v("p",[a._v("MySQL Connector/J 的驱动程序是一个类型4驱动程序。因为它们的网络协议的专有属性，数据库供应商通常提供类型4的驱动程序。")]),a._v(" "),v("p",[a._v("该使用哪种驱动程序？\n如果你正在访问一个数据库，如 Oracle，Sybase 或 IBM，首选的驱动程序是类型4。")]),a._v(" "),v("p",[a._v("如果你的 Java 应用程序同时访问多个数据库类型，类型3是首选的驱动程序。")]),a._v(" "),v("p",[a._v("类型2驱动程序是在你的数据库没有提供类型3或类型4驱动程序时使用的。")]),a._v(" "),v("p",[a._v("类型1驱动程序不被认为是部署级的驱动程序，它存在的目的通常仅用于开发和测试。")]),a._v(" "),v("h3",{attrs:{id:"相关知识"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相关知识"}},[a._v("#")]),a._v(" 相关知识")]),a._v(" "),v("h4",{attrs:{id:"odbc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#odbc"}},[a._v("#")]),a._v(" ODBC")]),a._v(" "),v("p",[a._v("ODBC（Open Database Connectivity）是一组对数据库访问的标准API，这些API通过SQL来完成大部分任务，而且它本身也支持SQL语言，支持用户发来的SQL。ODBC定义了访问数据库API的一组规范，这些API独立于形色各异的DBMS和编程语言。")]),a._v(" "),v("p",[a._v("也就是说，一个基于ODBC的应用程序，对数据库的操作不依赖任何DBMS，不直接与DBMS打交道，所有的数据库操作由对应的DBMS的ODBC驱动程序完成。不论是SQL Server、Access还是Oracle数据库，均可用ODBC API进行访问。")]),a._v(" "),v("p",[a._v("由此可见，ODBC的最大优点是能以统一的方式处理所有的数据库。")]),a._v(" "),v("p",[a._v("JDBC（JavaDatabase Connectivity）是Java与数据库的接口规范，JDBC定义了一个支持标准SQL功能的通用低层API，它由Java 语言编写的类和接口组成，旨在让各数据库开发商为Java程序员提供标准的数据库API。")]),a._v(" "),v("p",[a._v("JDBC API定义了若干Java中的类，表示数据库连接、SQL指令、结果集、数据库元数据等。它允许Java程序员发送SQL指令并处理结果。")]),a._v(" "),v("p",[v("strong",[a._v("共同点：")])]),a._v(" "),v("ol",[v("li",[a._v("比如，JDBC与ODBC都是基于X/Open的SQL调用级接口；")]),a._v(" "),v("li",[a._v("从结构上来讲，JDBC的总体结构类似于ODBC,都有四个组件：应用程序、驱动程序管理器、驱动程序和数据源,工作原 理亦大体相同；")]),a._v(" "),v("li",[a._v("在内容交互方面，JDBC保持了ODBC的基本特性,也独立于特定数据库. 而且都不是直接与数据库交互，而是通过驱动程序管理器。")])]),a._v(" "),v("p",[v("strong",[a._v("区别：")]),a._v("\n我们知道，ODBC几乎能在所有平台上连接几乎所有的数据库。为什么 Java 不使用 ODBC？\n答案是：Java 可以使用 ODBC，但最好是以JDBC-ODBC桥的形式使用（Java连接总体分为Java直连和JDBC-ODBC桥两种形式）。\n那为什么还需要 JDBC？")]),a._v(" "),v("ol",[v("li",[a._v('因为ODBC 不适合直接在 Java 中使用，因为它使用 C 语言接口。从Java 调用本地 C代码在安全性、实现、坚固性和程序的自动移植性方面都有许多缺点。从 ODBC C API 到 Java API 的字面翻译是不可取的。例如，Java 没有指针，而 ODBC 却对指针用得很广泛（包括很容易出错的指针"void *"）。')]),a._v(" "),v("li",[a._v("另外，ODBC 比较复杂，而JDBC 尽量保证简单功能的简便性，同时在必要时允许使用高级功能。如果使用ODBC，就必须手动地将 ODBC 驱动程序管理器和驱动程序安装在每台客户机上。如果完全用 Java 编写 JDBC 驱动程序则 JDBC代码在所有 Java 平台上（从网络计算机到大型机）都可以自 动安装、移植并保证安全性。")])]),a._v(" "),v("p",[a._v("总之，JDBC 在很大程度上是借鉴了ODBC的，从他的基础上发展而来。JDBC 保留了 ODBC 的基本设计特征，因此，熟悉 ODBC 的程序员将发现 JDBC 很容易使用。它们之间最大的区别在于：JDBC 以 Java 风格与优点为基础并进行优化，因此更加易于使用。")]),a._v(" "),v("h3",{attrs:{id:"参考文献"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[a._v("#")]),a._v(" 参考文献")]),a._v(" "),v("p",[v("a",{attrs:{href:"https://www.w3cschool.cn/jdbc/1e8k1ilm.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("JDBC指南"),v("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=s.exports}}]);