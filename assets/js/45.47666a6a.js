(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{405:function(a,t,_){"use strict";_.r(t);var r=_(0),v=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"一、前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[a._v("#")]),a._v(" 一、前言")]),a._v(" "),t("p",[a._v("学习一门语言的语法，我们往往只需要在一个文件中进行编码，甚至连IDE都不需要，一个简单的编辑器，然后通过命令行即可进行编译、运行。")]),a._v(" "),t("p",[a._v("而我们一旦需要使用到数据库访问或者提供web服务的时候，单个文件就变得力不从心了。")]),a._v(" "),t("p",[a._v("就说数据库访问，就涉及到解析数据库协议，远程通信，甚至为了提高性能，还会用到池化技术，这些能力显然是通用的，在开开源仓库中，早已有人造好了相关的轮子，我们只需要复用其代码即可。")]),a._v(" "),t("p",[a._v("对于复用代码，我们能想到的最简单粗暴的方式可能便是将其源代码拷贝到我们的工程当中。")]),a._v(" "),t("p",[a._v("当然，这对于成熟的软件工程领域，这显然是非常原始的做法，现在主流的方法是采用"),t("strong",[a._v("包管理工具")])]),a._v(" "),t("h3",{attrs:{id:"待办事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#待办事项"}},[a._v("#")]),a._v(" 待办事项")]),a._v(" "),t("ol",[t("li",[a._v("[ ] 区分kit工程与可运行工程")]),a._v(" "),t("li",[a._v("[ ] 解析主流go架构")]),a._v(" "),t("li",[a._v("[ ] 解析对比主流建模")])]),a._v(" "),t("p",[a._v("架构：\nhttps://github.com/go-kratos/kratos")]),a._v(" "),t("h3",{attrs:{id:"二、golang的包管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、golang的包管理"}},[a._v("#")]),a._v(" 二、Golang的包管理")]),a._v(" "),t("p",[a._v("在Java中，我们使用的包管理工具可以是Maven，也可以是Gradle；在JavaScript中，一般使用npm、yarn后者pnpm；对于Rust，则使用的是Cargo。")]),a._v(" "),t("p",[a._v("而我们今天的主角"),t("strong",[a._v("Golang")]),a._v("，也有自己的包管理工具。")]),a._v(" "),t("p",[a._v("相比于其他语言的包管理工具，Golang的包管理工具则是被开发者们诟病已久。Golang官方曾多次对其包管理工具进行过改进和优化，下面我们来看看Go的包管理工具演进历史。")]),a._v(" "),t("p",[a._v("Go 1.14 Go Modules 终于可以投入生产了")]),a._v(" "),t("p",[a._v("Go从1.14版本开始，就是用了最新的Go Modules作为包管理工具。")]),a._v(" "),t("h4",{attrs:{id:"_2-2-如何发布公共组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-如何发布公共组件"}},[a._v("#")]),a._v(" 2.2 如何发布公共组件")]),a._v(" "),t("h4",{attrs:{id:"_2-3-go如何使用私有仓库模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-go如何使用私有仓库模块"}},[a._v("#")]),a._v(" 2.3 Go如何使用私有仓库模块")]),a._v(" "),t("h3",{attrs:{id:"三、主流工程结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、主流工程结构"}},[a._v("#")]),a._v(" 三、主流工程结构")]),a._v(" "),t("p",[a._v("https://github.com/golang-standards/project-layout")]),a._v(" "),t("p",[a._v("整洁架构：\nhttps://github.com/evrone/go-clean-template")]),a._v(" "),t("h4",{attrs:{id:"_3-1-k8s"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-k8s"}},[a._v("#")]),a._v(" 3.1 K8S")]),a._v(" "),t("h4",{attrs:{id:"_3-2-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-docker"}},[a._v("#")]),a._v(" 3.2 Docker")]),a._v(" "),t("h4",{attrs:{id:"_3-3-prometheus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-prometheus"}},[a._v("#")]),a._v(" 3.3 Prometheus")]),a._v(" "),t("h4",{attrs:{id:"_3-4-grafana-loki"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-grafana-loki"}},[a._v("#")]),a._v(" 3.4 Grafana Loki")]),a._v(" "),t("p",[a._v("https://github.com/etcd-io/etcd")]),a._v(" "),t("p",[a._v("https://github.com/gogs/gogs")]),a._v(" "),t("p",[a._v("https://github.com/grafana/grafana")]),a._v(" "),t("p",[a._v("https://github.com/gin-gonic/gin")]),a._v(" "),t("p",[a._v("https://github.com/kubernetes/kubernetes")]),a._v(" "),t("p",[a._v("https://github.com/minio/minio")]),a._v(" "),t("p",[a._v("https://github.com/pingcap/tidb")]),a._v(" "),t("h3",{attrs:{id:"四、主流工程结构总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、主流工程结构总结"}},[a._v("#")]),a._v(" 四、主流工程结构总结")]),a._v(" "),t("h4",{attrs:{id:"_4-1-cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-cmd"}},[a._v("#")]),a._v(" 4.1 "),t("code",[a._v("/cmd")])]),a._v(" "),t("p",[a._v("这里放的是打包引用程序的入口，也就是包含main函数文件的地方。")]),a._v(" "),t("p",[a._v("熟悉Java的同学，可以把它当做@SpringBoot注解使用的地方，也就是整个应用的入口。")]),a._v(" "),t("p",[a._v("与Java不同，Java如果需要提供不同的main入口，那么是需要创建不同的模块，在pom中指定启动类。\nGo只需要把main函数放在不同文件下，并且package名字为main，那么就可以通过打包命令选择不同的入口文件而打包为不同的应用程序了。")]),a._v(" "),t("h4",{attrs:{id:"_4-2-internal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-internal"}},[a._v("#")]),a._v(" 4.2 "),t("code",[a._v("/internal")])]),a._v(" "),t("p",[a._v("这个目录比较特别，这个是Go编译器内置的一个特殊目录，")]),a._v(" "),t("h4",{attrs:{id:"_4-3-pkg"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-pkg"}},[a._v("#")]),a._v(" 4.3 "),t("code",[a._v("/pkg")])]),a._v(" "),t("p",[a._v("注意，这个目录是具有一定争议的，虽然有很多流行的项目都使用这种目录结构，但是也有不少社区并不喜欢。")]),a._v(" "),t("p",[a._v("这个目录其实是社区相对internal建立的，目的是显示的表名这个目录下的代码，可以被第三方安全的引入")]),a._v(" "),t("h3",{attrs:{id:"五、最佳实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、最佳实践"}},[a._v("#")]),a._v(" 五、最佳实践")]),a._v(" "),t("ul",[t("li",[a._v("root\n"),t("ul",[t("li",[a._v("app\n"),t("ul",[t("li",[a._v("moduleName\n"),t("ul",[t("li",[a._v("modle")]),a._v(" "),t("li",[a._v("api")]),a._v(" "),t("li",[a._v("service")])])])])]),a._v(" "),t("li",[a._v("boot")]),a._v(" "),t("li",[a._v("middleware\n"),t("ul",[t("li",[a._v("logger")])])]),a._v(" "),t("li",[a._v("cmd")]),a._v(" "),t("li",[a._v("main.go")]),a._v(" "),t("li",[a._v("go.sum")])])])]),a._v(" "),t("p",[t("strong",[a._v("解析")])]),a._v(" "),t("ol",[t("li",[a._v("cmd: 该目录一般用于放命令行相关工具")]),a._v(" "),t("li",[a._v("middleware，这儿一般存放公共模块，并且可以被其他项目所使用的部分")]),a._v(" "),t("li")]),a._v(" "),t("h4",{attrs:{id:"_5-1-cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-cmd"}},[a._v("#")]),a._v(" 5.1 "),t("code",[a._v("/cmd")])]),a._v(" "),t("p",[a._v("这里放的是打包引用程序的入口，也就是包含main函数文件的地方。")]),a._v(" "),t("p",[a._v("熟悉Java的同学，可以把它当做@SpringBoot注解使用的地方，也就是整个应用的入口。")]),a._v(" "),t("p",[a._v("与Java不同，Java如果需要提供不同的main入口，那么是需要创建不同的模块，在pom中指定启动类。\nGo只需要把main函数放在不同文件下，并且package名字为main，那么就可以通过打包命令选择不同的入口文件而打包为不同的应用程序了。")]),a._v(" "),t("h4",{attrs:{id:"_5-2-internal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-internal"}},[a._v("#")]),a._v(" 5.2 "),t("code",[a._v("/internal")])]),a._v(" "),t("p",[a._v("这个目录比较特别，这个是Go编译器内置的一个特殊目录，")]),a._v(" "),t("h4",{attrs:{id:"_5-3-pkg"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-pkg"}},[a._v("#")]),a._v(" 5.3 "),t("code",[a._v("/pkg")])]),a._v(" "),t("p",[a._v("注意，这个目录是具有一定争议的，虽然有很多流行的项目都使用这种目录结构，但是也有不少社区并不喜欢。")]),a._v(" "),t("p",[a._v("这个目录其实是社区相对internal建立的，目的是显示的表名这个目录下的代码，可以被第三方安全的引入")]),a._v(" "),t("h3",{attrs:{id:"六、模板工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、模板工具"}},[a._v("#")]),a._v(" 六、模板工具")]),a._v(" "),t("p",[a._v("对于Java开发者来说，想必对SpringBoot的工程模板非常熟悉，在官方网页，只需要输入项目名称，选择基础依赖，便可以自动声场好一个项目基本框架。")]),a._v(" "),t("p",[a._v("对于使用npm的JavaScript开发者来说，在模板工程方面做得则更加出色，只需要简单一行命令即可通过模板工程来初始化项目。\n其出色的地方更在于，开发者们为npm提供大量的工程模板，有TypeScript有Vue的，有ELementUI的，有TailweendCss的，还有Electron的，自己搭建模板工程也是非常之方便。")]),a._v(" "),t("p",[a._v("在Go中，目前还没有比较好的模板工具和生态，刚好趁着学习Go的机会，我们借此就自己造一个简单的模板工具，其目标就是只需要一条命令行即可初始化一个简单工程。")]),a._v(" "),t("p",[a._v("后面我们有复杂的需求，还可以实现比如创建DDD工程模板。")]),a._v(" "),t("h3",{attrs:{id:"七、参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、参考资料"}},[a._v("#")]),a._v(" 七、参考资料")]),a._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1987775",target:"_blank",rel:"noopener noreferrer"}},[a._v("Go如何使用私有仓库模块"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://studygolang.com/articles/10901",target:"_blank",rel:"noopener noreferrer"}},[a._v("Go语言(golang)包设计哲学/原则与项目结构组织最佳实践"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://xie.infoq.cn/article/4f870ba6a7c8e0fd825295c92",target:"_blank",rel:"noopener noreferrer"}},[a._v("5 分钟搞懂 Monorepo"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/wzb_wzt/article/details/124077713",target:"_blank",rel:"noopener noreferrer"}},[a._v("Go 工程化标准实践"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://www.163.com/dy/article/FTE6CRSD0518R7MO.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("程序员进阶指南：文档团队Golang最佳实践和CR案例集分享"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=v.exports}}]);